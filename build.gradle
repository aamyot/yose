buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.0.1'
    }
}


apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'jacoco'
apply plugin: 'com.github.kt3k.coveralls'

sourceCompatibility = 1.8
targetCompatibility = 1.8
version = '1.0'

repositories {
    mavenCentral()
}

def libs = [
        molecule     : 'com.vtence.molecule:molecule:0.6.1',
        molecule_test: 'com.vtence.molecule:molecule:0.6.1:tests',
        simple       : 'org.simpleframework:simple:5.1.6',
        jmustache    : 'com.samskivert:jmustache:1.9',
        hamcrest_all : 'org.hamcrest:hamcrest-all:1.3',
        dom_matchers : ['com.google.guava:guava:18.0',
                        'org.antlr:antlr-runtime:3.0.1',
                        'com.3levers.cssselectors:cssselectors:1.0@jar',
                        'org.testinfected.hamcrest-matchers:dom-matchers:1.7@jar'],
        mockito      : 'org.mockito:mockito-all:1.10.19',
        junit        : 'junit:junit:4.11@jar',
        gson         : 'com.google.code.gson:gson:2.3.1',
        selenium     : ['org.seleniumhq.selenium:selenium-api:2.44.0',
                        'org.seleniumhq.selenium:selenium-remote-driver:2.44.0',
                        'org.seleniumhq.selenium:selenium-htmlunit-driver:2.44.0',
                        'org.seleniumhq.selenium:selenium-firefox-driver:2.44.0']
]

dependencies {
    compile libs.molecule
    compile libs.simple
    compile libs.jmustache
    compile libs.gson
    testCompile libs.molecule_test
    testCompile libs.hamcrest_all
    testCompile libs.junit
    testCompile libs.dom_matchers
    testCompile libs.mockito
    testCompile libs.selenium
}

mainClassName = "com.alexandreamyot.yose.Yose"
applicationName = 'yose'

task wrapper(type: Wrapper) {
    gradleVersion = '2.1'
}

jacocoTestReport {
    reports {
        xml.enabled = true // coveralls plugin depends on xml format report
        html.enabled = true
    }
}

if (!project.hasProperty('port')) {
    ext.port = 8080
}

run {
    args port
}

task jasmineSetup(type: Exec) {
    commandLine 'npm', 'install'
}

task jasmineRun(type: Exec, dependsOn: jasmineSetup) {
    commandLine "npm", "test"
}

test.dependsOn('jasmineRun')

task stage(dependsOn: ['clean', 'installApp'])

task coverage(dependsOn: ['clean', 'test', 'jacocoTestReport'])
